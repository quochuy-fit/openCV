import streamlit as st
import numpy as np

# --- 1. H√ÄM H·ªñ TR·ª¢ X·ª¨ L√ù MA TR·∫¨N V√Ä TRUNG V·ªä ---

def calculate_median(arr: list, mode: str) -> float:
    """T√≠nh gi√° tr·ªã trung v·ªã cho m·∫£ng. H·ªó tr·ª£ ch·∫ø ƒë·ªô ch·∫µn."""
    if not arr:
        return 0.0
    
    # S·∫Øp x·∫øp m·∫£ng ƒë·ªÉ t√¨m trung v·ªã
    sorted_arr = sorted(arr)
    n = len(sorted_arr)
    
    if n % 2 != 0:
        # Tr∆∞·ªùng h·ª£p L·∫ª: Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ch√≠nh gi·ªØa
        return sorted_arr[n // 2]
    else:
        # Tr∆∞·ªùng h·ª£p Ch·∫µn: C√≥ hai ph·∫ßn t·ª≠ gi·ªØa
        val1 = sorted_arr[n // 2 - 1]
        val2 = sorted_arr[n // 2]
        
        if mode == 'first':
            # Theo y√™u c·∫ßu: l·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n trong hai gi√° tr·ªã gi·ªØa
            return val1
        elif mode == 'average':
            # T√≠nh trung b√¨nh hai gi√° tr·ªã gi·ªØa
            return (val1 + val2) / 2.0
        return 0.0

def create_matrix_input(label: str, rows: int, cols: int, key_prefix: str) -> np.ndarray or None:
    """T·∫°o giao di·ªán nh·∫≠p ma tr·∫≠n d∆∞·ªõi d·∫°ng c·ªôt v√† tr·∫£ v·ªÅ m·∫£ng numpy."""
    st.subheader(label)
    
    # T·∫°o c√°c c·ªôt cho input
    cols_input = st.columns(cols)
    matrix = []
    
    # D·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho d·ªÖ th·ª≠ nghi·ªám
    default_input = np.array([[1, 2, 1, 0], [5, 6, 2, 3], [4, 1, 9, 8], [0, 2, 3, 1]])
    default_kernel = np.array([[1, 0, -1], [1, 0, -1], [1, 0, -1]])
    
    # Ch·ªçn d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
    if key_prefix == 'input_':
        default_data = default_input
    elif key_prefix == 'kernel_':
        default_data = default_kernel
    else:
        default_data = np.zeros((rows, cols))

    # X·ª≠ l√Ω ma tr·∫≠n
    try:
        for r in range(rows):
            row = []
            for c in range(cols):
                
                # L·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n
                default_val = default_data[r, c] if r < default_data.shape[0] and c < default_data.shape[1] else 0.0
                
                # T·∫°o widget input trong t·ª´ng c·ªôt
                val = cols_input[c].number_input(
                    label=f'{key_prefix}{r},{c}',
                    value=float(default_val),
                    key=f'{key_prefix}{r}_{c}',
                    label_visibility='collapsed',
                    step=1.0 # B∆∞·ªõc nh·∫£y l√† 1.0 cho s·ªë nguy√™n/float
                )
                row.append(val)
            matrix.append(row)
        return np.array(matrix)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc ma tr·∫≠n {label}: {e}")
        return None

# --- 2. H√ÄM T√çNH TO√ÅN T√çCH CH·∫¨P ---

def perform_convolution(input_matrix, kernel, P, S):
    """Th·ª±c hi·ªán ph√©p t√≠ch ch·∫≠p (Convolution) v·ªõi Padding v√† Stride."""
    R, C = input_matrix.shape
    KR, KC = kernel.shape
    
    # 1. T√≠nh k√≠ch th∆∞·ªõc ƒë·∫ßu ra
    OR = np.floor((R - KR + 2 * P) / S).astype(int) + 1
    OC = np.floor((C - KC + 2 * P) / S).astype(int) + 1

    if OR <= 0 or OC <= 0:
        raise ValueError(f"K√≠ch th∆∞·ªõc ma tr·∫≠n ƒë·∫ßu ra kh√¥ng h·ª£p l·ªá: {OR}x{OC}. Vui l√≤ng ki·ªÉm tra l·∫°i tham s·ªë Kernel/Padding/Stride.")

    # 2. Th√™m Padding (Zero Padding)
    padded_matrix = np.pad(input_matrix, ((P, P), (P, P)), 'constant', constant_values=0)
    
    # 3. Th·ª±c hi·ªán T√≠ch ch·∫≠p
    output_matrix = np.zeros((OR, OC))
    
    for i in range(OR):
        for j in range(OC):
            # X√°c ƒë·ªãnh v√πng Kernel tr√™n ma tr·∫≠n ƒë·ªám
            start_row = i * S
            end_row = start_row + KR
            start_col = j * S
            end_col = start_col + KC
            
            # Tr√≠ch xu·∫•t c·ª≠a s·ªï v√† t√≠nh t·ªïng t√≠ch
            window = padded_matrix[start_row:end_row, start_col:end_col]
            output_matrix[i, j] = np.sum(window * kernel)
            
    return output_matrix

# --- 3. H√ÄM T√çNH TO√ÅN L·ªåC TRUNG V·ªä ---

def perform_median_filter(input_matrix, N, mode):
    """Th·ª±c hi·ªán L·ªçc Trung v·ªã (Median Filter)"""
    R, C = input_matrix.shape
    
    # K√≠ch th∆∞·ªõc b√°n k√≠nh padding (window radius)
    P_median = N // 2
    
    output_matrix = np.zeros((R, C))
    
    # 1. Th√™m Zero Padding cho ma tr·∫≠n ƒë·∫ßu v√†o (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi vi·ªác ki·ªÉm tra bi√™n)
    padded_input = np.pad(input_matrix, P_median, 'constant', constant_values=0)
    
    for r in range(R):
        for c in range(C):
            neighbors = []
            
            # L·∫∑p qua c·ª≠a s·ªï N x N (l·∫•y t·ª´ ma tr·∫≠n ƒë√£ ƒë·ªám)
            for i in range(N):
                for j in range(N):
                    # V·ªã tr√≠ tr√™n ma tr·∫≠n ƒë√£ ƒë·ªám
                    pr = r + i
                    pc = c + j
                    neighbors.append(padded_input[pr, pc])

            # T√≠nh trung v·ªã v√† g√°n v√†o ma tr·∫≠n ƒë·∫ßu ra
            output_matrix[r, c] = calculate_median(neighbors, mode)
            
    return output_matrix


# --- 4. GIAO DI·ªÜN STREAMLIT CH√çNH ---

def main():
    st.set_page_config(layout="centered", page_title="C√¥ng c·ª• T√≠ch ch·∫≠p & L·ªçc Trung v·ªã")
    st.title("üî¢ C√¥ng c·ª• T√≠ch ch·∫≠p v√† L·ªçc Trung v·ªã")
    
    # --- PH·∫¶N 1: NH·∫¨P LI·ªÜU CHO T√çCH CH·∫¨P ---
    st.header("1. Tham s·ªë T√≠ch ch·∫≠p (Convolution)")

    # 1.1 K√≠ch th∆∞·ªõc Ma tr·∫≠n ƒê·∫ßu v√†o
    col1, col2 = st.columns(2)
    R = col1.number_input("S·ªë h√†ng Ma tr·∫≠n ƒê·∫ßu v√†o (R)", min_value=1, value=4, key='R')
    C = col2.number_input("S·ªë c·ªôt Ma tr·∫≠n ƒê·∫ßu v√†o (C)", min_value=1, value=4, key='C')
    
    input_matrix = create_matrix_input("Ma tr·∫≠n ƒê·∫ßu v√†o (Input)", R, C, 'input_')

    # 1.2 K√≠ch th∆∞·ªõc Kernel
    col3, col4 = st.columns(2)
    KR = col3.number_input("S·ªë h√†ng Kernel (KR)", min_value=1, value=3, key='KR')
    KC = col4.number_input("S·ªë c·ªôt Kernel (KC)", min_value=1, value=3, key='KC')
    
    kernel_matrix = create_matrix_input("Ma tr·∫≠n Kernel/B·ªô l·ªçc", KR, KC, 'kernel_')
    
    # 1.3 Tham s·ªë Padding v√† Stride
    st.markdown("---")
    st.subheader("Tham s·ªë Kh√°c")
    col5, col6 = st.columns(2)
    P = col5.number_input("Padding (P)", min_value=0, value=0, key='P', step=1)
    S = col6.number_input("Stride (S)", min_value=1, value=1, key='S', step=1)

    # N√∫t Th·ª±c hi·ªán T√≠ch ch·∫≠p
    if st.button("‚ñ∂Ô∏è Th·ª±c hi·ªán T√≠ch ch·∫≠p", key='btn_conv'):
        if input_matrix is None or kernel_matrix is None:
            st.error("Vui l√≤ng ki·ªÉm tra l·∫°i k√≠ch th∆∞·ªõc v√† gi√° tr·ªã ma tr·∫≠n.")
        else:
            try:
                # L∆∞u k·∫øt qu·∫£ v√†o state ƒë·ªÉ d√πng cho L·ªçc Trung v·ªã
                st.session_state['conv_result'] = perform_convolution(input_matrix, kernel_matrix, P, S)
                st.success("T√≠ch ch·∫≠p ho√†n t·∫•t!")
            except ValueError as e:
                st.error(f"L·ªói t√≠nh to√°n T√≠ch ch·∫≠p: {e}")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

    # --- PH·∫¶N 2: K·∫æT QU·∫¢ T√çCH CH·∫¨P ---
    st.header("2. K·∫øt qu·∫£ Ma tr·∫≠n T√≠ch ch·∫≠p")
    
    if 'conv_result' in st.session_state and st.session_state['conv_result'].size > 0:
        conv_matrix = st.session_state['conv_result']
        OR, OC = conv_matrix.shape
        st.info(f"K√≠ch th∆∞·ªõc ƒê·∫ßu ra (Feature Map): **{OR} x {OC}**")
        
        # Hi·ªÉn th·ªã ma tr·∫≠n k·∫øt qu·∫£
        st.dataframe(conv_matrix.round(2), use_container_width=True)
        
        # --- PH·∫¶N 3: L·ªåC TRUNG V·ªä ---
        st.header("3. L·ªçc Trung v·ªã (Median Filtering)")
        
        col7, col8 = st.columns(2)
        N = col7.number_input(
            "K√≠ch th∆∞·ªõc Window (N x N)", 
            min_value=1, 
            value=3, 
            step=2, 
            key='N',
            help="K√≠ch th∆∞·ªõc Window/Neighbor. Th∆∞·ªùng l√† s·ªë l·∫ª (v√≠ d·ª•: 3, 5)."
        )
        
        median_mode = col8.selectbox(
            "Ch·∫ø ƒë·ªô Trung v·ªã Ch·∫µn",
            options=['first', 'average'],
            format_func=lambda x: 'Ch·ªçn gi√° tr·ªã ƒë·∫ßu ti√™n (theo y√™u c·∫ßu)' if x == 'first' else 'T√≠nh trung b√¨nh hai gi√° tr·ªã',
            key='median_mode'
        )
        
        if st.button("‚ú® Th·ª±c hi·ªán L·ªçc Trung v·ªã", key='btn_median'):
            if N % 2 == 0:
                st.error("K√≠ch th∆∞·ªõc Window (N) ph·∫£i l√† s·ªë l·∫ª.")
            else:
                try:
                    median_result = perform_median_filter(conv_matrix, N, median_mode)
                    st.session_state['median_result'] = median_result
                    st.success("L·ªçc Trung v·ªã ho√†n t·∫•t!")
                except Exception as e:
                    st.error(f"L·ªói t√≠nh to√°n L·ªçc Trung v·ªã: {e}")

    # --- K·∫æT QU·∫¢ L·ªåC TRUNG V·ªä ---
    if 'median_result' in st.session_state and st.session_state['median_result'].size > 0:
        st.subheader("K·∫øt qu·∫£ L·ªçc Trung v·ªã")
        st.dataframe(st.session_state['median_result'].round(2), use_container_width=True)
    
if __name__ == "__main__":
    main()
